// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipe.proto

package pipe

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1979e1a5fdc07ed, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "pipe.Data")
}

func init() { proto.RegisterFile("pipe.proto", fileDescriptor_d1979e1a5fdc07ed) }

var fileDescriptor_d1979e1a5fdc07ed = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc8, 0x2c, 0x48,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0xa4, 0xd3, 0xf3, 0xf3, 0xd3,
	0x73, 0x52, 0xf5, 0xc1, 0x62, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x10, 0x25,
	0x4a, 0x52, 0x5c, 0x2c, 0x2e, 0x89, 0x25, 0x89, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x89, 0x25, 0x89,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0xb6, 0x91, 0x05, 0x17, 0x4b, 0x40, 0x66, 0x41,
	0xaa, 0x90, 0x01, 0x17, 0x9b, 0x67, 0x5e, 0x7a, 0x6a, 0x71, 0x89, 0x10, 0x97, 0x1e, 0xd8, 0x74,
	0x90, 0x0e, 0x29, 0x31, 0x3d, 0x88, 0xb9, 0x7a, 0x30, 0x73, 0xf5, 0x5c, 0x41, 0xe6, 0x2a, 0x31,
	0x68, 0x30, 0x26, 0xb1, 0x81, 0xc5, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xde, 0xa8, 0x77,
	0x6f, 0x8d, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipeClient is the client API for Pipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipeClient interface {
	Ingest(ctx context.Context, opts ...grpc.CallOption) (Pipe_IngestClient, error)
}

type pipeClient struct {
	cc *grpc.ClientConn
}

func NewPipeClient(cc *grpc.ClientConn) PipeClient {
	return &pipeClient{cc}
}

func (c *pipeClient) Ingest(ctx context.Context, opts ...grpc.CallOption) (Pipe_IngestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pipe_serviceDesc.Streams[0], "/pipe.Pipe/Ingest", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipeIngestClient{stream}
	return x, nil
}

type Pipe_IngestClient interface {
	Send(*Data) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type pipeIngestClient struct {
	grpc.ClientStream
}

func (x *pipeIngestClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pipeIngestClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PipeServer is the server API for Pipe service.
type PipeServer interface {
	Ingest(Pipe_IngestServer) error
}

// UnimplementedPipeServer can be embedded to have forward compatible implementations.
type UnimplementedPipeServer struct {
}

func (*UnimplementedPipeServer) Ingest(srv Pipe_IngestServer) error {
	return status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}

func RegisterPipeServer(s *grpc.Server, srv PipeServer) {
	s.RegisterService(&_Pipe_serviceDesc, srv)
}

func _Pipe_Ingest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipeServer).Ingest(&pipeIngestServer{stream})
}

type Pipe_IngestServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type pipeIngestServer struct {
	grpc.ServerStream
}

func (x *pipeIngestServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pipeIngestServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Pipe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipe.Pipe",
	HandlerType: (*PipeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ingest",
			Handler:       _Pipe_Ingest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pipe.proto",
}
